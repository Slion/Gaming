//
// Elite Dangerous Thrustmaster TARGET script for Dual T16000M setup.
// Could easily be adapted for other similar setups.
//
// Right joystick controls pitch, roll and yaw.
// Left joysticks controls throttle, both with stick and slider, as well as lateral and vertical thrusters.
//
// That script was designed not to hardcode keyboard keys.
// Instead we use actual joystick buttons.
//

// System include
include "target.tmh"
// User include
include "ed.tmh"

// Handle to our right hand joystick
alias RIGHT;
// Handle to our left hand joystick
alias LEFT;

// ---- Mapping mode management ----
define KMappingModeDefault 0
define KMappingModeCombat 1
int iMappingMode = KMappingModeDefault;
// ----

//
// Entry point
//
int main()
    {
    // We ain't using any of the following hardware so we just ignore them.
    Configure(&HCougar, MODE_EXCLUDED);
    Configure(&Joystick, MODE_EXCLUDED);
    Configure(&Throttle, MODE_EXCLUDED);
    Configure(&LMFD, MODE_EXCLUDED);
    Configure(&RMFD, MODE_EXCLUDED);
    Configure(&TWCSThrottle, MODE_EXCLUDED);
    Configure(&TFRPRudder, MODE_EXCLUDED);
    
    // Hook in our event handler    
	if(Init(&EventHandle)) return 1;
	
	// Fetch our joysticks.
	// Swap them if you want it the other way around.
	&LEFT = &T16000L;
	&RIGHT = &T16000;
	
    // Specify our mappings    
    MapAxes();
    MapKeys();

    }

//
// Event Handler
//
int EventHandle(int type, alias o, int x)
{
   DefaultMapping(&o, x);
   //add event handling code here
}


//
// Axes mapping
//
int MapAxes()
    {
	
    //1st T-16000M
	MapAxis(&RIGHT, JOYX, DX_X_AXIS); // Roll
	MapAxis(&RIGHT, JOYY, DX_Y_AXIS); // Pitch
	MapAxis(&RIGHT, RUDDER, DX_ZROT_AXIS); // Yaw
    MapAxis(&RIGHT, THR, DX_SLIDER_AXIS, AXIS_REVERSED); // Unused
		
	//2nd T-16000M
	MapAxis(&LEFT, JOYX, DX_XROT_AXIS); // Lateral thrusters
	MapAxis(&LEFT, JOYY, DX_Z_AXIS); // Throttle, instant throttle to use durring combat or maneuvers
	MapAxis(&LEFT, RUDDER, DX_YROT_AXIS); // Vertical thrusters
	MapAxis(&LEFT, THR, DX_Z_AXIS); // Throttle, fixed throttle to use in supercruise for instance
	// Restrict fixed Throttle to forward as T16K does not have neutral position marker
	SetCustomCurve(&LEFT, THR, LIST(0,0,  100,50)); 

    }
    
//
// Key mapping
//
int MapKeys()
    {
    // -------- Right joystick --------
    // - Map our hat
    MapKey(&RIGHT, H1U, DXHATUP);
	MapKey(&RIGHT, H1R, DXHATRIGHT);	
	MapKey(&RIGHT, H1D, DXHATDOWN);
	MapKey(&RIGHT, H1L, DXHATLEFT);
		
	// - Map trigger and thumb stick buttons	
	MapKey(&RIGHT, TS1, KWeaponsFirePrimary); // Trigger
	// Short: Toggle Hardpoints
    // Long: Toggle Landing Gear
	MapKeyLong(&RIGHT, TS2, KWeaponsToggleHardpoints, KMiscToggleLandingGear); // Thumb
	MapKey(&RIGHT, TS3, KTargetSelect); // Thumb left
	MapKey(&RIGHT, TS4, KWeaponsCycleFireGroupNext); // Thumb right
    // --------

    // -------- Left joystick --------
    // - Map our hat
    MapKeysLeftHat(H1U,H1R,H1D,H1L); // Actual hat
    MapKeysLeftHat(B12,B14,B15,B16); // Also mapped on the base to avoid touching the stick when using fixed throttled 

    // - Map trigger and thumb stick buttons	
    MapKey(&LEFT, TS1, KWeaponsFireSecondary); // Trigger
    // Short: Engine Boost
    // Long: Toggle Frame Shift Drive
	MapKeyLong(&LEFT, TS2, KFlightEngineBoost, KFlightToggleFrameShiftDrive); // Thumb
    //
    MapKeysDefault();
    
    // Base direct access to FSD, handy for quick drop out 
    MapKey(&LEFT, B8, KFlightToggleFrameShiftDrive);
    // --------    
    }

//
// Map functions of the left hat to the given hardware buttons.
//
int MapKeysLeftHat(int aUp, int aRight, int aDown, int aLeft)
    {
    // Short: Show comms UI
    // Long: Toggle mapping mode
    MapKeyLong(&LEFT, aUp, KModeSwitchPanelComms, EXEC("ToggleMappingMode();")); // Up
	MapKeyLong(&LEFT, aRight, KModeSwitchPanelSystems, KModeSwitchMapGalaxy); // Right
	MapKey(&LEFT, aDown, KModeSwitchPanelRole); // Down
	MapKeyLong(&LEFT, aLeft, KModeSwitchPanelTarget, KModeSwitchMapSystem); // Left    
    }


//
// Map combat mode keys.
//
int MapKeysCombat()
    {
    printf("Combat mode enabled\xa");    
    // Targeting switch to hostile only
    MapKeyLong(&LEFT, TS3, KTargetCycleHostilePrevious, KTargetWingmansTarget); // Thumb left
	MapKeyLong(&LEFT, TS4, KTargetCycleHostileNext, KTargetHighestThreat); // Thumb right	       
    // Base duplicates
    MapKeyLong(&LEFT, B11, KTargetCycleHostilePrevious, KTargetWingmansTarget); // Thumb left
	MapKeyLong(&LEFT, B13, KTargetCycleHostileNext, KTargetHighestThreat); // Thumb right	           
    }

//
// Map default mode keys.
//
int MapKeysDefault()
    {
    printf("Default mode enabled\xa");    
    // Targeting switch to all targets
	MapKeyLong(&LEFT, TS3, KTargetCyclePrevious, KTargetWingmansTarget); // Thumb left
	MapKeyLong(&LEFT, TS4, KTargetCycleNext, KTargetHighestThreat); // Thumb right	
    // Base duplicates
	MapKeyLong(&LEFT, B11, KTargetCyclePrevious, KTargetWingmansTarget); // Thumb left
	MapKeyLong(&LEFT, B13, KTargetCycleNext, KTargetHighestThreat); // Thumb right	    
    }


//
// Switch between mapping modes
//
int ToggleMappingMode()
    {
    if (iMappingMode==KMappingModeDefault)
        {
        MapKeysCombat();
        iMappingMode = KMappingModeCombat;
        }
    else
        {
        MapKeysDefault();
        iMappingMode = KMappingModeDefault;
        }
    }
