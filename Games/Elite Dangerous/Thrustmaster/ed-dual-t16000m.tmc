//
// Elite Dangerous Thrustmaster TARGET script for Dual T16000M setup.
// Could easily be adapted for other similar setups.
//
// Right joystick controls pitch, roll and yaw.
// Left joysticks controls throttle, both with stick and slider, as well as lateral and vertical thrusters.
//
// That script was designed not to hardcode keyboard keys.
// Instead we use actual joystick buttons.
//

// System include
include "target.tmh"
// User include
include "ed.tmh"
include "win32.tmh"

// Handle to our right hand joystick
alias RIGHT;
// Handle to our left hand joystick
alias LEFT;

// TODO: move to some header
define KErrNone 0
define KErrGeneral 1
define KFalse 0
define KTrue 1

// ---- Mapping mode management ----
define KMappingModeDefault 0
define KMappingModeCombat 1
int iMappingMode = KMappingModeDefault;
// ----
char tempPath;

// TODO: Adjust this for your local configuration
alias folder="C:\\Dev\\GitHub\\Slion\\Gaming\\Games\\Elite Dangerous\\Thrustmaster\\";
alias pipeFileName="\\\\.\\pipe\\NamedPipeTest";

// File Handle for Pipe communication with PowerShell
int iPipe=INVALID_HANDLE_VALUE;

//
// Entry point
//
int main()
    {
    
    // Load win32 libraries we will need
    LoadLibraries();         
    
    // We ain't using any of the following hardware so we just ignore them.
    Configure(&HCougar, MODE_EXCLUDED);
    Configure(&Joystick, MODE_EXCLUDED);
    Configure(&Throttle, MODE_EXCLUDED);
    Configure(&LMFD, MODE_EXCLUDED);
    Configure(&RMFD, MODE_EXCLUDED);
    Configure(&TWCSThrottle, MODE_EXCLUDED);
    Configure(&TFRPRudder, MODE_EXCLUDED);
    
    // Hook in our event handler    
	if(Init(&EventHandle)) return 1;
		
	// Fetch our joysticks.
	// Swap them if you want it the other way around.
	&LEFT = &T16000L;
	&RIGHT = &T16000;
	
    // Specify our mappings    
    MapAxes();
    MapKeys();

    //Start PowerShell server if needed
    if (!IsPowerShellServerRunning())
        {
        StartPowerShellServer();      
        }
    }

//
// Event Handler
//
int EventHandle(int type, alias o, int x)
    {
    //printf("Event %d\xa",type);
    DefaultMapping(&o, x);
    //add event handling code here
    }


//
// Axes mapping
//
int MapAxes()
    {
	
    //1st T-16000M
	MapAxis(&RIGHT, JOYX, DX_X_AXIS); // Roll
	MapAxis(&RIGHT, JOYY, DX_Y_AXIS); // Pitch
	MapAxis(&RIGHT, RUDDER, DX_ZROT_AXIS); // Yaw
    MapAxis(&RIGHT, THR, DX_SLIDER_AXIS, AXIS_REVERSED); // Unused
		
	//2nd T-16000M
	MapAxis(&LEFT, JOYX, DX_XROT_AXIS); // Lateral thrusters
	MapAxis(&LEFT, JOYY, DX_Z_AXIS); // Throttle, instant throttle to use durring combat or maneuvers
	MapAxis(&LEFT, RUDDER, DX_YROT_AXIS); // Vertical thrusters
	MapAxis(&LEFT, THR, DX_Z_AXIS); // Throttle, fixed throttle to use in supercruise for instance
	// Restrict fixed Throttle to forward as T16K does not have neutral position marker
	SetCustomCurve(&LEFT, THR, LIST(0,0,  100,50)); 

    }
    
//
// Key mapping
//
int MapKeys()
    {
    // -------- Right joystick --------
    // - Map our hat
    MapKey(&RIGHT, H1U, DXHATUP);
	MapKey(&RIGHT, H1R, DXHATRIGHT);	
	MapKey(&RIGHT, H1D, DXHATDOWN);
	MapKey(&RIGHT, H1L, DXHATLEFT);
		
	// - Map trigger and thumb stick buttons	
	MapKey(&RIGHT, TS1, KWeaponsFirePrimary); // Trigger
	// Short: Toggle Hardpoints
    // Long: Toggle Landing Gear
	MapKeyLong(&RIGHT, TS2, KWeaponsToggleHardpoints, KMiscLandingGearToggle); // Thumb
	MapKeyLong(&RIGHT, TS3, KTargetSelect, KTargetHighestThreat); // Thumb left
	MapKey(&RIGHT, TS4, KWeaponsCycleFireGroupNext); // Thumb right
    // --------

    // -------- Left joystick --------
    // - Map our hat
    MapKeysLeftHat(H1U,H1R,H1D,H1L); // Actual hat
    MapKeysLeftHat(B12,B14,B15,B16); // Also mapped on the base to avoid touching the stick when using fixed throttled 

    // - Map trigger and thumb stick buttons	
    MapKey(&LEFT, TS1, KWeaponsFireSecondary); // Trigger
    // Short: Engine Boost
    // Long: Toggle Frame Shift Drive
	MapKeyLong(&LEFT, TS2, KFlightEngineBoost, KFlightToggleFrameShiftDrive); // Thumb
    //
    MapKeysModeDefault();
    
    // Base direct access to FSD, handy for quick drop out, long press give you boost 
    MapKeyLong(&LEFT, B8, KFlightToggleFrameShiftDrive, KFlightEngineBoost);
    //
    MapKey(&LEFT, B5, KMiscSensorZoomIncrease);
    MapKey(&LEFT, B10, KMiscSensorZoomDecrease);
    // --------    
    }

//
// Map functions of the left hat to the given hardware buttons.
//
int MapKeysLeftHat(int aUp, int aRight, int aDown, int aLeft)
    {
    // Short: Show comms UI
    // Long: Toggle mapping mode
    MapKeyLong(&LEFT, aUp, KModeSwitchPanelComms, EXEC("ToggleMappingMode();")); // Up
	MapKeyLong(&LEFT, aRight, KModeSwitchPanelSystems, KModeSwitchMapGalaxy); // Right
	MapKey(&LEFT, aDown, KModeSwitchPanelRole); // Down
	MapKeyLong(&LEFT, aLeft, KModeSwitchPanelTarget, KModeSwitchMapSystem); // Left    
    }


//
// Map combat mode keys.
//
int MapKeysModeCombat()
    {
    printf("Combat mode enabled\xa");    
    // Targeting switch to hostile only
    MapKeyLong(&LEFT, TS3, KTargetCycleHostilePrevious, KTargetWingmansTarget); // Thumb left
	MapKeyLong(&LEFT, TS4, KTargetCycleHostileNext, KTargetNextSystemInRoute); // Thumb right	       
    // Base duplicates
    MapKeyLong(&LEFT, B11, KTargetCycleHostilePrevious, KTargetWingmansTarget); // Thumb left
	MapKeyLong(&LEFT, B13, KTargetCycleHostileNext, KTargetNextSystemInRoute); // Thumb right	           
    }

//
// Map default mode keys.
//
int MapKeysModeDefault()
    {
    printf("Default mode enabled\xa");    
    // Targeting switch to all targets
	MapKeyLong(&LEFT, TS3, KTargetCyclePrevious, KTargetWingmansTarget); // Thumb left
	MapKeyLong(&LEFT, TS4, KTargetCycleNext, KTargetNextSystemInRoute); // Thumb right	
    // Base duplicates
	MapKeyLong(&LEFT, B11, KTargetCyclePrevious, KTargetWingmansTarget); // Thumb left
	MapKeyLong(&LEFT, B13, KTargetCycleNext, KTargetNextSystemInRoute); // Thumb right	    
    }


//
// Switch between mapping modes
//
int ToggleMappingMode()
    {
    //system("spawn powershell.exe -NoProfile -NonInteractive -NoLogo -WindowStyle Minimized -Command [System.Console]::Beep(250, 200)");
    //system("spawn cmd.exe /q /c powershell.exe -NoProfile -NonInteractive -NoLogo -WindowStyle Minimized -Command [System.Console]::Beep(250, 200)");
    //system("spawn wscript.exe HiddenPowerShell.vbs");
    
    if (iMappingMode==KMappingModeDefault)
        {
        // Signal our switch
        BeepModeCombat();
        // Switching to combat mode mapping
        MapKeysModeCombat();
        iMappingMode = KMappingModeCombat;
        }
    else
        {
        // Signal our switch
        BeepModeDefault();
        // Switching to default mode mapping
        MapKeysModeDefault();
        iMappingMode = KMappingModeDefault;
        }
    }

//
// Start our PowerShell server.
// @return KTrue upon success, KFalse otherwise.
//
int StartPowerShellServer()
    {    
    char cmd;
    int length=Dim(&cmd,512);
    //strcat(&cmd,"spawn powershell.exe -NoLogo -NoExit -Command \"& {'C:\\Dev\\GitHub\\Slion\\Gaming\\Games\\Elite Dangerous\\Thrustmaster\\Monitor.ps1'}\"");
    strcat(&cmd,"spawn powershell.exe -ExecutionPolicy Unrestricted -NonInteractive -NoLogo -Command \"&'C:\\Dev\\GitHub\\Slion\\Gaming\\Games\\Elite Dangerous\\Thrustmaster\\Server.ps1' | Invoke-Expression\"");
    //strcat(&cmd,"spawn powershell.exe -NoExit -File \"");
    //strcat(&cmd,&folder);
    //strcat(&cmd,"Monitor.ps1\"");
    printf("%s\xa",&cmd);
    system(&cmd);
    
    if (WaitOpenPipe())
        {
        SendMessage("(Get-Host).UI.RawUI.WindowTitle='Thrustmaster TARGET'");
        SendMessage("Write-Host 'Thrustmaster TARGET'");
        ClosePipe();
        return KTrue;
        }
        
    return KFalse;
    }

//
// Check PowerShell connection.
// @return KTrue if a connection could be established, KFalse otherwise
//
int IsPowerShellServerRunning()
    {
    if (OpenPipe())
        {
        ClosePipe();
        return KTrue;
        }
    
    return KFalse;    
    }

//
// Open pipe and attempt to start server if needed.
//
int CheckOpenPipe()
    {
    // Try opening our pipe a couple of times
    if (!OpenPipe())
        {
        if (!OpenPipe())
            {
            // Failed to open pipe, try starting the server again...
            StartPowerShellServer();
            // ...attempt to open our pipe one last time
            return WaitOpenPipe();
            }
            
        }
    
    return KTrue;        
    }

//
// Open our PowerShell connection pipe.
// @return KTrue on success, KFalse otherwise.
int OpenPipe()
    {
    iPipe = CreateFile(&&pipeFileName,GENERIC_READ|GENERIC_WRITE,FILE_SHARE_READ|FILE_SHARE_WRITE,0,OPEN_EXISTING,0,0);        
    if (iPipe != INVALID_HANDLE_VALUE)
        {
        return KTrue;
        }
        
    return KFalse ;    
    }


//
// Close our PowerShell connection pipe.
//
int ClosePipe()
    {
    CloseHandle(iPipe);
    iPipe = INVALID_HANDLE_VALUE;
    }    

//
// Open our PowerShell connection pipe.
// @return KTrue if the pipe was opened, KFalse otherwise.
//
int WaitOpenPipe()
    {
    // Connect to our pipe, making sure we wait long enough for the server to come online
    int attempts=30;    
    printf("Connecting to PowerShell .");   
    // Double conditional in while statement did not work so we kept it simple and used break instead.
    // Looks like we are hitting some limitations of that scripting language.
    while (attempts>0)
        {
        OpenPipe();        
        if (iPipe != INVALID_HANDLE_VALUE)
            {
            break;
            }

        printf(".");
        attempts=attempts-1;
        Sleep(100);
        }    
        
    if (iPipe == INVALID_HANDLE_VALUE)
        {
        printf(" Failure!\xa");
        printf("PowerShell functionalities unavailable.\xa");
        return KFalse;
        }
    
    // We have handshake
    printf(" Success.\xa");
    return KTrue;
    }

//
// Send the given message to our powershell server.
// 
int SendMessage(alias aMessage)
    {
    int written=0;
    int length=strlen(&aMessage);
    WriteFile(iPipe,&&aMessage,length,&&written,0);
    alias eom="\xa"; // New line to signal end of message
    length=strlen(&eom);
    WriteFile(iPipe,&&eom,length,&&written,0);
    //return written==length;
    //printf("Written: %d \xa",written);    
    return KErrNone;
    }

//
// 
//
int BeepModeDefault()
    {
    if (CheckOpenPipe())
        {
        SendMessage("[System.Console]::Beep(400, 80)");
        SendMessage("[System.Console]::Beep(250, 80)");    
        ClosePipe();
        }
    }

//
// 
//
int BeepModeCombat()
    {
    if (CheckOpenPipe())
        {
        SendMessage("[System.Console]::Beep(200, 80)");
        SendMessage("[System.Console]::Beep(300, 80)");
        SendMessage("[System.Console]::Beep(400, 160)");
        ClosePipe();
        }
    }


